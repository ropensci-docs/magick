[{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"installing-magick","dir":"Articles","previous_headings":"","what":"Installing magick","title":"The magick package: Advanced Image-Processing in R","text":"Windows macOS package easily installed via CRAN. binary CRAN packages work box important features enabled. Use magick_config see features formats supported version ImageMagick.","code":"install.packages(\"magick\") library(magick) ## Linking to ImageMagick 6.9.11.60 ## Enabled features: fontconfig, freetype, fftw, heic, lcms, pango, webp, x11 ## Disabled features: cairo, ghostscript, raw, rsvg ## Using 4 threads str(magick::magick_config()) ## List of 24 ##  $ version           :Class 'numeric_version'  hidden list of 1 ##   ..$ : int [1:4] 6 9 11 60 ##  $ modules           : logi TRUE ##  $ cairo             : logi FALSE ##  $ fontconfig        : logi TRUE ##  $ freetype          : logi TRUE ##  $ fftw              : logi TRUE ##  $ ghostscript       : logi FALSE ##  $ heic              : logi TRUE ##  $ jpeg              : logi TRUE ##  $ lcms              : logi TRUE ##  $ libopenjp2        : logi TRUE ##  $ lzma              : logi TRUE ##  $ pangocairo        : logi TRUE ##  $ pango             : logi TRUE ##  $ png               : logi TRUE ##  $ raw               : logi FALSE ##  $ rsvg              : logi FALSE ##  $ tiff              : logi TRUE ##  $ webp              : logi TRUE ##  $ wmf               : logi TRUE ##  $ x11               : logi TRUE ##  $ xml               : logi TRUE ##  $ zero-configuration: logi FALSE ##  $ threads           : int 4"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"build-from-source","dir":"Articles","previous_headings":"Installing magick","what":"Build from source","title":"The magick package: Advanced Image-Processing in R","text":"Linux need install ImageMagick++ library: Debian/Ubuntu called libmagick++-dev: Fedora CentOS/RHEL need ImageMagick-c++-devel: install source macOS need either imagemagick@6 imagemagick homebrew. Unfortunately current imagemagick@6 configuration homebrew disables bunch features, including librsvg fontconfig. Therefore quality fonts svg rendering might suboptimal. problem CRAN binary package.","code":"sudo apt-get install libmagick++-dev sudo yum install ImageMagick-c++-devel brew install imagemagick@6"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"image-io","dir":"Articles","previous_headings":"","what":"Image IO","title":"The magick package: Advanced Image-Processing in R","text":"makes magick magical automatically converts renders common image formats. ImageMagick supports dozens formats automatically detects type. Use magick::magick_config() list formats version ImageMagick supports.","code":""},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"read-and-write","dir":"Articles","previous_headings":"Image IO","what":"Read and write","title":"The magick package: Advanced Image-Processing in R","text":"Images can read directly file path, URL, raw vector image data image_read. image_info function shows meta data image, similar imagemagick identify command line utility.  use image_write export image format file disk, memory path = NULL. path filename, image_write returns path success result can piped function taking file path.","code":"library(magick) tiger <- image_read_svg('http://jeroen.github.io/images/tiger.svg', width = 350) print(tiger) ##   format width height colorspace matte filesize density ## 1    PNG   350    350       sRGB  TRUE        0   72x72 # Render svg to png bitmap image_write(tiger, path = \"tiger.png\", format = \"png\")"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"converting-formats","dir":"Articles","previous_headings":"Image IO","what":"Converting formats","title":"The magick package: Advanced Image-Processing in R","text":"Magick keeps image memory original format. Specify format parameter image_write convert another format. can also internally convert image another format earlier, applying transformations. can useful original format lossy. Note size currently 0 ImageMagick lazy (good sense) render .","code":"tiger_png <- image_convert(tiger, \"png\") image_info(tiger_png) ##   format width height colorspace matte filesize density ## 1    PNG   350    350       sRGB  TRUE        0   72x72"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"preview","dir":"Articles","previous_headings":"Image IO","what":"Preview","title":"The magick package: Advanced Image-Processing in R","text":"IDE’s built-web browser (RStudio) automatically display magick images viewer. results neat interactive image editing environment.  Alternatively, Linux can use image_display preview image X11 window. Finally image_browse opens image system’s default application given type. Another method converting image raster object plot R’s graphics display. However slow useful combination plotting functionality. See #raster .","code":"# X11 only image_display(tiger)  # System dependent image_browse(tiger)"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"transformations","dir":"Articles","previous_headings":"","what":"Transformations","title":"The magick package: Advanced Image-Processing in R","text":"best way get sense available transformations walk examples ?transformations help page RStudio. examples get sense possible.","code":""},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"cut-and-edit","dir":"Articles","previous_headings":"Transformations","what":"Cut and edit","title":"The magick package: Advanced Image-Processing in R","text":"Several transformation functions take geometry parameter requires special syntax form AxB+C+D element optional. examples: image_crop(image, \"100x150+50\"): crop width:100px height:150px starting +50px left image_scale(image, \"200\"): resize proportionally width: 200px image_scale(image, \"x200\"): resize proportionally height: 200px image_fill(image, \"blue\", \"+100+200\"): flood fill blue starting point x:100, y:200 image_border(frink, \"red\", \"20x10\"): adds border 20px left+right 10px top+bottom full syntax specified Magick::Geometry documentation.            image_fill can flood fill starting pixel point. fuzz parameter allows fill cross adjacent pixels similarish colors. value must 0 256^2 specifying max geometric distance colors considered equal. give professor frink orange shirt World Cup.","code":"# Example image frink <- image_read(\"https://jeroen.github.io/images/frink.png\") print(frink) ##   format width height colorspace matte filesize density ## 1    PNG   220    445       sRGB  TRUE    73494   72x72 # Add 20px left/right and 10px top/bottom image_border(image_background(frink, \"hotpink\"), \"#000080\", \"20x10\") # Trim margins image_trim(frink) # Passport pica image_crop(frink, \"100x150+50\") # Resize image_scale(frink, \"300\") # width: 300px image_scale(frink, \"x300\") # height: 300px # Rotate or mirror image_rotate(frink, 45) image_flip(frink) image_flop(frink) # Brightness, Saturation, Hue image_modulate(frink, brightness = 80, saturation = 120, hue = 90) # Paint the shirt orange image_fill(frink, \"orange\", point = \"+100+200\", fuzz = 20)"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"filters-and-effects","dir":"Articles","previous_headings":"Transformations","what":"Filters and effects","title":"The magick package: Advanced Image-Processing in R","text":"ImageMagick also bunch standard effects worth checking .","code":"# Add randomness image_blur(frink, 10, 5) image_noise(frink) # Silly filters image_charcoal(frink) image_oilpaint(frink) image_negate(frink)"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"kernel-convolution","dir":"Articles","previous_headings":"Transformations","what":"Kernel convolution","title":"The magick package: Advanced Image-Processing in R","text":"image_convolve() function applies kernel image. Kernel convolution means pixel value recalculated using weighted neighborhood sum defined kernel matrix. example lets look simple kernel: kernel changes pixel mean horizontal vertical neighboring pixels, results slight blurring effect right-hand image :  use standard kernels","code":"kern <- matrix(0, ncol = 3, nrow = 3) kern[1, 2] <- 0.25 kern[2, c(1, 3)] <- 0.25 kern[3, 2] <- 0.25 kern ##      [,1] [,2] [,3] ## [1,] 0.00 0.25 0.00 ## [2,] 0.25 0.00 0.25 ## [3,] 0.00 0.25 0.00 img <- image_resize(logo, \"300x300\") img_blurred <- image_convolve(img, kern) image_append(c(img, img_blurred)) img |> image_convolve('Sobel') |> image_negate() img |> image_convolve('DoG:0,0,2') |> image_negate()"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"text-annotation","dir":"Articles","previous_headings":"Transformations","what":"Text annotation","title":"The magick package: Advanced Image-Processing in R","text":"Finally can useful print text top images:    Fonts supported platforms include \"sans\", \"mono\", \"serif\", \"Times\", \"Helvetica\", \"Trebuchet\", \"Georgia\", \"Palatino\"\"Comic Sans\".","code":"# Add some text image_annotate(frink, \"I like R!\", size = 70, gravity = \"southwest\", color = \"green\") # Customize text image_annotate(frink, \"CONFIDENTIAL\", size = 30, color = \"red\", boxcolor = \"pink\",   degrees = 60, location = \"+50+100\") # Fonts may require ImageMagick has fontconfig image_annotate(frink, \"The quick brown fox\", font = 'Times', size = 30)"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"combining-with-pipes","dir":"Articles","previous_headings":"Transformations","what":"Combining with pipes","title":"The magick package: Advanced Image-Processing in R","text":"image transformation functions returns modified copy original image. affect original image. Hence combine transformations need chain :  Using pipe syntax makes bit readable","code":"frink <- image_read(\"https://jeroen.github.io/images/frink.png\") frink2 <- image_scale(frink, \"100\") image_info(frink) ##   format width height colorspace matte filesize density ## 1    PNG   220    445       sRGB  TRUE    73494   72x72 image_info(frink2) ##   format width height colorspace matte filesize density ## 1    PNG   100    202       sRGB  TRUE        0   72x72 test <- image_rotate(frink, 90) test <- image_background(test, \"blue\", flatten = TRUE) test <- image_border(test, \"red\", \"10x10\") test <- image_annotate(test, \"This is how we combine transformations\", color = \"white\", size = 30) print(test) ##   format width height colorspace matte filesize density ## 1    PNG   465    240       sRGB  TRUE        0   72x72 image_read(\"https://jeroen.github.io/images/frink.png\") |>   image_rotate(270) |>   image_background(\"blue\", flatten = TRUE) |>   image_border(\"red\", \"10x10\") |>   image_annotate(\"The same thing with pipes\", color = \"white\", size = 30)"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"image-vectors","dir":"Articles","previous_headings":"","what":"Image Vectors","title":"The magick package: Advanced Image-Processing in R","text":"examples concern single images. However functions magick vectorized support working layers, compositions animation. standard base methods [ [[, c() length() used manipulate vectors images can treated layers frames.","code":"# Download earth gif and make it a bit smaller for vignette earth <- image_read(\"https://jeroen.github.io/images/earth.gif\") |>   image_scale(\"200x\") |>   image_quantize(128)  length(earth) ## [1] 44 earth head(image_info(earth)) ##   format width height colorspace matte filesize density ## 1    GIF   200    200        RGB FALSE        0   72x72 ## 2    GIF   200    200        RGB  TRUE        0   72x72 ## 3    GIF   200    200        RGB  TRUE        0   72x72 ## 4    GIF   200    200        RGB  TRUE        0   72x72 ## 5    GIF   200    200        RGB  TRUE        0   72x72 ## 6    GIF   200    200        RGB  TRUE        0   72x72 rev(earth) |>    image_flip() |>    image_annotate(\"meanwhile in Australia\", size = 20, color = \"white\")"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"layers","dir":"Articles","previous_headings":"Image Vectors","what":"Layers","title":"The magick package: Advanced Image-Processing in R","text":"can stack layers top Photoshop: mosaic prints images top one another, expanding output canvas everything fits:  Flattening combines layers single image size first image:  Flattening mosaic allow specifying alternative composite operators:","code":"bigdata <- image_read('https://jeroen.github.io/images/bigdata.jpg') frink <- image_read(\"https://jeroen.github.io/images/frink.png\") logo <- image_read(\"https://jeroen.github.io/images/Rlogo.png\") img <- c(bigdata, logo, frink) img <- image_scale(img, \"300x300\") image_info(img) ##   format width height colorspace matte filesize density ## 1   JPEG   300    225       sRGB FALSE        0   72x72 ## 2    PNG   300    232       sRGB  TRUE        0   72x72 ## 3    PNG   148    300       sRGB  TRUE        0   72x72 image_mosaic(img) image_flatten(img) image_flatten(img, 'Add') image_flatten(img, 'Modulate') image_flatten(img, 'Minus')"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"combining","dir":"Articles","previous_headings":"Image Vectors","what":"Combining","title":"The magick package: Advanced Image-Processing in R","text":"Appending means simply putting frames next :  Use stack = TRUE position top :  Composing allows combining two images specific position:","code":"image_append(image_scale(img, \"x200\")) image_append(image_scale(img, \"100\"), stack = TRUE) bigdatafrink <- image_scale(image_rotate(image_background(frink, \"none\"), 300), \"x200\") image_composite(image_scale(bigdata, \"x400\"), bigdatafrink, offset = \"+180+100\")"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"pages","dir":"Articles","previous_headings":"Image Vectors","what":"Pages","title":"The magick package: Advanced Image-Processing in R","text":"reading PDF document, page becomes element vector. Note PDF gets rendered reading need specify density immediately.","code":"manual <- image_read_pdf('https://cloud.r-project.org/web/packages/magick/magick.pdf', density = 72) image_info(manual) ##    format width height colorspace matte filesize density ## 1     PNG   612    792       sRGB  TRUE        0   72x72 ## 2     PNG   612    792       sRGB  TRUE        0   72x72 ## 3     PNG   612    792       sRGB  TRUE        0   72x72 ## 4     PNG   612    792       sRGB  TRUE        0   72x72 ## 5     PNG   612    792       sRGB  TRUE        0   72x72 ## 6     PNG   612    792       sRGB  TRUE        0   72x72 ## 7     PNG   612    792       sRGB  TRUE        0   72x72 ## 8     PNG   612    792       sRGB  TRUE        0   72x72 ## 9     PNG   612    792       sRGB  TRUE        0   72x72 ## 10    PNG   612    792       sRGB  TRUE        0   72x72 ## 11    PNG   612    792       sRGB  TRUE        0   72x72 ## 12    PNG   612    792       sRGB  TRUE        0   72x72 ## 13    PNG   612    792       sRGB  TRUE        0   72x72 ## 14    PNG   612    792       sRGB  TRUE        0   72x72 ## 15    PNG   612    792       sRGB  TRUE        0   72x72 ## 16    PNG   612    792       sRGB  TRUE        0   72x72 ## 17    PNG   612    792       sRGB  TRUE        0   72x72 ## 18    PNG   612    792       sRGB  TRUE        0   72x72 ## 19    PNG   612    792       sRGB  TRUE        0   72x72 ## 20    PNG   612    792       sRGB  TRUE        0   72x72 ## 21    PNG   612    792       sRGB  TRUE        0   72x72 ## 22    PNG   612    792       sRGB  TRUE        0   72x72 ## 23    PNG   612    792       sRGB  TRUE        0   72x72 ## 24    PNG   612    792       sRGB  TRUE        0   72x72 ## 25    PNG   612    792       sRGB  TRUE        0   72x72 ## 26    PNG   612    792       sRGB  TRUE        0   72x72 ## 27    PNG   612    792       sRGB  TRUE        0   72x72 ## 28    PNG   612    792       sRGB  TRUE        0   72x72 ## 29    PNG   612    792       sRGB  TRUE        0   72x72 ## 30    PNG   612    792       sRGB  TRUE        0   72x72 ## 31    PNG   612    792       sRGB  TRUE        0   72x72 ## 32    PNG   612    792       sRGB  TRUE        0   72x72 ## 33    PNG   612    792       sRGB  TRUE        0   72x72 ## 34    PNG   612    792       sRGB  TRUE        0   72x72 ## 35    PNG   612    792       sRGB  TRUE        0   72x72 ## 36    PNG   612    792       sRGB  TRUE        0   72x72 ## 37    PNG   612    792       sRGB  TRUE        0   72x72 ## 38    PNG   612    792       sRGB  TRUE        0   72x72 ## 39    PNG   612    792       sRGB  TRUE        0   72x72 ## 40    PNG   612    792       sRGB  TRUE        0   72x72 ## 41    PNG   612    792       sRGB  TRUE        0   72x72 ## 42    PNG   612    792       sRGB  TRUE        0   72x72 ## 43    PNG   612    792       sRGB  TRUE        0   72x72 ## 44    PNG   612    792       sRGB  TRUE        0   72x72 manual[1]"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"animation","dir":"Articles","previous_headings":"Image Vectors","what":"Animation","title":"The magick package: Advanced Image-Processing in R","text":"Instead treating vector elements layers, can also make frames animation!  Morphing creates sequence n images gradually morph one image another. makes animations  read existing GIF Video file, frame becomes layer: Manipulate individual frames put back animation:  Animations can saved GIF MPEG files:","code":"image_animate(image_scale(img, \"200x200\"), fps = 1, dispose = \"previous\") newlogo <- image_scale(image_read(\"https://jeroen.github.io/images/Rlogo.png\")) oldlogo <- image_scale(image_read(\"https://jeroen.github.io/images/Rlogo-old.png\")) image_resize(c(oldlogo, newlogo), '200x150!') |>   image_background('white') |>   image_morph() |>   image_animate(optimize = TRUE) # Foreground image banana <- image_read(\"https://jeroen.github.io/images/banana.gif\") banana <- image_scale(banana, \"150\") image_info(banana) ##   format width height colorspace matte filesize density ## 1    GIF   150    148       sRGB  TRUE        0   72x72 ## 2    GIF   150    148       sRGB  TRUE        0   72x72 ## 3    GIF   150    148       sRGB  TRUE        0   72x72 ## 4    GIF   150    148       sRGB  TRUE        0   72x72 ## 5    GIF   150    148       sRGB  TRUE        0   72x72 ## 6    GIF   150    148       sRGB  TRUE        0   72x72 ## 7    GIF   150    148       sRGB  TRUE        0   72x72 ## 8    GIF   150    148       sRGB  TRUE        0   72x72 # Background image background <- image_background(image_scale(logo, \"200\"), \"white\", flatten = TRUE)  # Combine and flatten frames frames <- image_composite(background, banana, offset = \"+70+30\")  # Turn frames into animation animation <- image_animate(frames, fps = 10, optimize = TRUE) print(animation) ##   format width height colorspace matte filesize density ## 1    gif   200    155       sRGB  TRUE        0   72x72 ## 2    gif    94    105       sRGB  TRUE        0   72x72 ## 3    gif   125    122       sRGB  TRUE        0   72x72 ## 4    gif   108    118       sRGB  TRUE        0   72x72 ## 5    gif   108    105       sRGB  TRUE        0   72x72 ## 6    gif    92    105       sRGB  TRUE        0   72x72 ## 7    gif   113    123       sRGB  TRUE        0   72x72 ## 8    gif   119    118       sRGB  TRUE        0   72x72 image_write(animation, \"Rlogo-banana.gif\")"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"drawing-and-graphics","dir":"Articles","previous_headings":"","what":"Drawing and Graphics","title":"The magick package: Advanced Image-Processing in R","text":"relatively recent addition package native R graphics device produces magick image object. can either used like regular device making plots, alternatively open device draws onto existing image using pixel coordinates.","code":""},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"graphics-device","dir":"Articles","previous_headings":"Drawing and Graphics","what":"Graphics device","title":"The magick package: Advanced Image-Processing in R","text":"image_graph() function opens new graphics device similar e.g. png() x11(). returns image object plot(s) written. “page” plotting device become frame image object. can easily post-process figure using regular image operations.","code":"# Produce image using graphics device fig <- image_graph(width = 400, height = 400, res = 96) ggplot2::qplot(mpg, wt, data = mtcars, colour = cyl) ## Warning: `qplot()` was deprecated in ggplot2 3.4.0. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. dev.off() # Combine out <- image_composite(fig, frink, offset = \"+70+30\") print(out) ## # A tibble: 1 × 7 ##   format width height colorspace matte filesize density ##   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   ## 1 PNG      400    400 sRGB       TRUE         0 96x96"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"drawing-device","dir":"Articles","previous_headings":"Drawing and Graphics","what":"Drawing device","title":"The magick package: Advanced Image-Processing in R","text":"Another way use graphics device draw top exiting image using pixel coordinates.  default image_draw() sets margins 0 uses graphics coordinates match image size pixels (width x height) (0,0) top left corner. Note means y axis increases top bottom opposite typical graphics coordinates. can override passing custom xlim, ylim mar values image_draw.","code":"# Or paint over an existing image img <- image_draw(frink) rect(20, 20, 200, 100, border = \"red\", lty = \"dashed\", lwd = 5) abline(h = 300, col = 'blue', lwd = '10', lty = \"dotted\") text(30, 250, \"Hoiven-Glaven\", family = \"monospace\", cex = 4, srt = 90) palette(rainbow(11, end = 0.9)) symbols(rep(200, 11), seq(0, 400, 40), circles = runif(11, 5, 35),   bg = 1:11, inches = FALSE, add = TRUE) dev.off() print(img) ## # A tibble: 1 × 7 ##   format width height colorspace matte filesize density ##   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   ## 1 PNG      220    445 sRGB       TRUE         0 72x72"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"animated-graphics","dir":"Articles","previous_headings":"Drawing and Graphics","what":"Animated Graphics","title":"The magick package: Advanced Image-Processing in R","text":"graphics device supports multiple frames makes easy create animated graphics. code shows implement example cool gganimate package using magick graphics device.  write file simply :","code":"library(gapminder) library(ggplot2) img <- image_graph(600, 340, res = 96) datalist <- split(gapminder, gapminder$year) out <- lapply(datalist, function(data){   p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +     scale_size(\"population\", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +      scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()   print(p) }) dev.off() animation <- image_animate(img, fps = 2, optimize = TRUE) print(animation) ## # A tibble: 12 × 7 ##    format width height colorspace matte filesize density ##    <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   ##  1 gif      600    340 sRGB       TRUE         0 96x96   ##  2 gif      384    240 sRGB       TRUE         0 96x96   ##  3 gif      394    235 sRGB       TRUE         0 96x96   ##  4 gif      373    229 sRGB       TRUE         0 96x96   ##  5 gif      392    223 sRGB       TRUE         0 96x96   ##  6 gif      373    232 sRGB       TRUE         0 96x96   ##  7 gif      353    232 sRGB       TRUE         0 96x96   ##  8 gif      307    208 sRGB       TRUE         0 96x96   ##  9 gif      319    257 sRGB       TRUE         0 96x96   ## 10 gif      330    216 sRGB       TRUE         0 96x96   ## 11 gif      355    206 sRGB       TRUE         0 96x96   ## 12 gif      345    206 sRGB       TRUE         0 96x96 image_write(animation, \"gapminder.gif\")"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"raster-images","dir":"Articles","previous_headings":"","what":"Raster Images","title":"The magick package: Advanced Image-Processing in R","text":"Magick images can also converted raster objects use R’s graphics device. Thereby can combine graphics tools. However note R’s graphics device slow different coordinate system reduces quality image.","code":""},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"base-r-rasters","dir":"Articles","previous_headings":"Raster Images","what":"Base R rasters","title":"The magick package: Advanced Image-Processing in R","text":"Base R .raster format converts image vector strings. paper Raster Images R Graphics Paul Murrell gives nice overview.","code":"plot(as.raster(frink)) # Print over another graphic plot(cars) rasterImage(frink, 21, 0, 25, 80)"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"the-grid-package","dir":"Articles","previous_headings":"Raster Images","what":"The grid package","title":"The magick package: Advanced Image-Processing in R","text":"grid package makes easier overlay raster graphics device without adjust x/y coordinates plot.","code":"library(ggplot2) library(grid) qplot(speed, dist, data = cars, geom = c(\"point\", \"smooth\")) ## `geom_smooth()` using method = 'loess' and formula = 'y ~ x' grid.raster(frink)"},{"path":"https://docs.ropensci.org/magick/articles/intro.html","id":"ocr-text-extraction","dir":"Articles","previous_headings":"","what":"OCR text extraction","title":"The magick package: Advanced Image-Processing in R","text":"recent addition package extract text images using OCR. requires tesseract package:","code":"install.packages(\"tesseract\") img <- image_read(\"http://jeroen.github.io/images/testocr.png\") print(img) ## # A tibble: 1 × 7 ##   format width height colorspace matte filesize density ##   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   ## 1 PNG      640    480 sRGB       TRUE     23359 72x72 # Extract text cat(image_ocr(img)) ## This is a lot of 12 point text to test the ## ocr code and see if it works on all types ## of file format. ##  ## The quick brown dog jumped over the ## lazy fox. The quick brown dog jumped ## over the lazy fox. The quick brown dog ## jumped over the lazy fox. The quick ## brown dog jumped over the lazy fox."},{"path":"https://docs.ropensci.org/magick/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeroen Ooms. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/magick/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ooms J (2024). magick: Advanced Graphics Image-Processing R. R package version 2.8.3, https://docs.ropensci.org/magick/https://ropensci.r-universe.dev/magick.","code":"@Manual{,   title = {magick: Advanced Graphics and Image-Processing in R},   author = {Jeroen Ooms},   year = {2024},   note = {R package version 2.8.3},   url = {https://docs.ropensci.org/magick/ https://ropensci.r-universe.dev/magick}, }"},{"path":"https://docs.ropensci.org/magick/index.html","id":"ropensci-the-magick-package","dir":"","previous_headings":"","what":"Advanced Graphics and Image-Processing in R","title":"Advanced Graphics and Image-Processing in R","text":"Advanced Image-Processing R Bindings ImageMagick: comprehensive open-source image processing library available. Supports many common formats (png, jpeg, tiff, pdf, etc) manipulations (rotate, scale, crop, trim, flip, blur, etc). operations vectorized via Magick++ STL meaning operate either single frame series frames working layers, collages, animation. RStudio images automatically previewed printed console, resulting interactive editing environment.","code":""},{"path":"https://docs.ropensci.org/magick/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Advanced Graphics and Image-Processing in R","text":"R package: Getting started: magick package: Advanced Image-Processing R rOpenSci Community Call (recording) underlying library: Magick++ Tutorial Magick++ STL Documentation","code":""},{"path":"https://docs.ropensci.org/magick/index.html","id":"hello-world","dir":"","previous_headings":"","what":"Hello World","title":"Advanced Graphics and Image-Processing in R","text":"Run examples RStudio see live previews images! use RStudio, use image_browse open images. Linux can also use image_display get X11 preview.  Effects  Create GIF animation:  Read GIF animation frames. See rotating earth example GIF.  R logo dancing banana","code":"library(magick) frink <- image_read(\"https://jeroen.github.io/images/frink.png\") image_trim(frink) image_scale(frink, \"200x200\") image_flip(frink) image_rotate(frink, 45) ## <-- result of this is shown image_negate(frink) frink |>    image_background(\"green\") |>    image_flatten() |>   image_border(\"red\", \"10x10\") image_rotate(frink, 45) |> image_write(\"man/figures/frink-rotated.png\") image_oilpaint(frink) image_implode(frink) image_charcoal(frink) ## <-- result of this is shown image_blur(frink) image_edge(frink) image_charcoal(frink) |> image_write(\"man/figures/frink-charcoal.png\") # Download images oldlogo <- image_read(\"https://developer.r-project.org/Logo/Rlogo-2.png\") newlogo <- image_read(\"https://jeroen.github.io/images/Rlogo-old.png\") logos <- c(oldlogo, newlogo) logos <- image_scale(logos, \"400x400\")  # Create GIF (animation1 <- image_animate(logos)) image_write(animation1, \"man/figures/anim1.gif\")  # Morph effect  <-- result of this is shown (animation2 <- image_animate(image_morph(logos, frames = 10))) image_write(animation2, \"man/figures/anim2.gif\") earth <- image_read(\"https://upload.wikimedia.org/wikipedia/commons/2/2c/Rotating_earth_%28large%29.gif\") length(earth) earth[1] earth[1:3] earth1 <- rev(image_flip(earth)) ## How Austrialans see earth image_write(earth1, \"man/figures/earth1.gif\") ## <-- result of this is shown logo <- image_read(\"https://www.r-project.org/logo/Rlogo.png\") banana <- image_read(\"https://jeroen.github.io/images/banana.gif\") front <- image_scale(banana, \"300\") background <- image_scale(logo, \"400\") frames <- lapply(as.list(front), function(x) image_flatten(c(background, x))) image_write(image_animate(image_join(frames)), \"man/figures/Rlogo-banana.gif\")"},{"path":"https://docs.ropensci.org/magick/index.html","id":"use-magick-in-shiny-apps","dir":"","previous_headings":"","what":"Use magick in Shiny Apps","title":"Advanced Graphics and Image-Processing in R","text":"demo application shows use magick shiny: https://github.com/jeroen/shinymagick","code":""},{"path":"https://docs.ropensci.org/magick/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Advanced Graphics and Image-Processing in R","text":"Binary packages macOS Windows can installed directly CRAN: Installation source Linux OSX requires imagemagick Magick++ library. Debian Ubuntu install libmagick++-dev: Fedora, CentOS RHEL need ImageMagick-c++-devel. However CentOS system version ImageMagick quite old. recent versions available ImageMagick downloads website. macOS use imagemagick@6 Homebrew. unversioned homebrew formulaimagemagick can also used, however unsolved OpenMP problems. also fork imagemagick called graphicsmagick, doesn’t work package.","code":"install.packages(\"magick\") sudo apt-get install -y libmagick++-dev sudo yum install ImageMagick-c++-devel brew install imagemagick@6"},{"path":"https://docs.ropensci.org/magick/reference/analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Analysis — analysis","title":"Image Analysis — analysis","text":"Functions image calculations analysis. part package needs work.","code":""},{"path":"https://docs.ropensci.org/magick/reference/analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Analysis — analysis","text":"","code":"image_compare(image, reference_image, metric = \"\", fuzz = 0)  image_compare_dist(image, reference_image, metric = \"\", fuzz = 0)  image_fft(image)"},{"path":"https://docs.ropensci.org/magick/reference/analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Analysis — analysis","text":"image magick image object returned image_read() image_graph() reference_image another image compare metric string metric metric_types() \"AE\" \"phash\" fuzz relative color distance (value 0 100) considered similar filling algorithm","code":""},{"path":"https://docs.ropensci.org/magick/reference/analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Analysis — analysis","text":"details see Image++ documentation. Short descriptions: image_compare calculates metric comparing image reference image. image_fft returns Discrete Fourier Transform (DFT) image magnitude / phase image pair. wish knew means. image_compare() vectorized first argument returns diff image calculated distortion value attribute.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Analysis — analysis","text":"","code":"out1 <- image_blur(logo, 3) out2 <- image_oilpaint(logo, 3) input <- c(logo, out1, out2, logo) if(magick_config()$version >= \"6.8.7\"){   diff_img <- image_compare(input, logo, metric = \"AE\")   attributes(diff_img) } #> $class #> [1] \"magick-image\" #>  #> $distortion #> [1]     0 50455 20580     0 #>"},{"path":"https://docs.ropensci.org/magick/reference/animation.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Frames and Animation — animation","title":"Image Frames and Animation — animation","text":"Operations manipulate combine multiple frames image. Details .","code":""},{"path":"https://docs.ropensci.org/magick/reference/animation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Frames and Animation — animation","text":"","code":"image_animate(   image,   fps = 10,   delay = NULL,   loop = 0,   dispose = c(\"background\", \"previous\", \"none\"),   optimize = FALSE )  image_coalesce(image)  image_morph(image, frames = 8)  image_mosaic(image, operator = NULL)  image_flatten(image, operator = NULL)  image_average(image)  image_append(image, stack = FALSE)  image_apply(image, FUN, ...)  image_montage(   image,   geometry = NULL,   tile = NULL,   gravity = \"Center\",   bg = \"white\",   shadow = FALSE )"},{"path":"https://docs.ropensci.org/magick/reference/animation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Frames and Animation — animation","text":"image magick image object returned image_read() image_graph() fps frames per second. Ignored delay NULL. delay delay frame, 1/100 seconds. Must length 1, number frames. specified, fps ignored. loop many times repeat animation. Default infinite. dispose frame disposal method dispose_types() optimize optimize gif animation storing differences frames. Input images must exactly size. frames number frames use output animation operator string composite operator compose_types() stack place images top--bottom (TRUE) left--right (FALSE) FUN function called frame image ... additional parameters FUN geometry geometry string defines size individual thumbnail images, spacing . tile geometry string example \"4x5 limits tiled images laid final result. gravity gravity direction, image smaller frame, frame image placed. bg background color string shadow enable shadows images","code":""},{"path":"https://docs.ropensci.org/magick/reference/animation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Frames and Animation — animation","text":"details see Magick++ STL documentation. Short descriptions: image_animate coalesces frames playing sequence converting gif format. image_morph expands number frames interpolating intermediate frames blend played animation. image_mosaic inlays images form single coherent picture. image_montage creates composite image combining frames. image_flatten merges frames layers single frame using given operator. image_average averages frames single frame. image_append stack images left--right (default) top--bottom. image_apply applies function frame image_apply function calls image function frame joins results back single image. operations already vectorized often needed. Note FUN() return image. apply kinds functions image frames simply use lapply, vapply, etc.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/animation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Frames and Animation — animation","text":"","code":"# Combine images logo <- image_read(\"https://jeroen.github.io/images/Rlogo.png\") oldlogo <- image_read(\"https://jeroen.github.io/images/Rlogo-old.png\")  # Create morphing animation both <- image_scale(c(oldlogo, logo), \"400\") image_average(image_crop(both)) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      400    304 sRGB       TRUE         0 118x118 image_animate(image_morph(both, 10)) #> # A tibble: 12 × 7 #>    format width height colorspace matte filesize density #>    <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #>  1 gif      400    304 sRGB       TRUE         0 118x118 #>  2 gif      400    304 sRGB       TRUE         0 118x118 #>  3 gif      400    304 sRGB       TRUE         0 118x118 #>  4 gif      400    304 sRGB       TRUE         0 118x118 #>  5 gif      400    304 sRGB       TRUE         0 118x118 #>  6 gif      400    304 sRGB       TRUE         0 118x118 #>  7 gif      400    304 sRGB       TRUE         0 118x118 #>  8 gif      400    304 sRGB       TRUE         0 118x118 #>  9 gif      400    304 sRGB       TRUE         0 118x118 #> 10 gif      400    304 sRGB       TRUE         0 118x118 #> 11 gif      400    304 sRGB       TRUE         0 118x118 #> 12 gif      400    304 sRGB       TRUE         0 72x72    # Create thumbnails from GIF banana <- image_read(\"https://jeroen.github.io/images/banana.gif\") length(banana) #> [1] 8 image_average(banana) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      365    360 sRGB       TRUE         0 72x72   image_flatten(banana) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      365    360 sRGB       TRUE         0 72x72   image_append(banana) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF     2920    360 sRGB       TRUE         0 72x72   image_append(banana, stack = TRUE) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      365   2880 sRGB       TRUE         0 72x72    # Append images together wizard <- image_read(\"wizard:\") image_append(image_scale(c(image_append(banana[c(1,3)], stack = TRUE), wizard))) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      730    720 sRGB       TRUE         0 72x72    image_composite(banana, image_scale(logo, \"300\")) #> # A tibble: 8 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      365    360 sRGB       TRUE         0 72x72   #> 2 GIF      365    360 sRGB       TRUE         0 72x72   #> 3 GIF      365    360 sRGB       TRUE         0 72x72   #> 4 GIF      365    360 sRGB       TRUE         0 72x72   #> 5 GIF      365    360 sRGB       TRUE         0 72x72   #> 6 GIF      365    360 sRGB       TRUE         0 72x72   #> 7 GIF      365    360 sRGB       TRUE         0 72x72   #> 8 GIF      365    360 sRGB       TRUE         0 72x72    # Break down and combine frames front <- image_scale(banana, \"300\") background <- image_background(image_scale(logo, \"400\"), 'white') frames <- image_apply(front, function(x){image_composite(background, x, offset = \"+70+30\")}) image_animate(frames, fps = 10) #> # A tibble: 8 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 gif      400    310 sRGB       TRUE         0 72x72   #> 2 gif      400    310 sRGB       TRUE         0 72x72   #> 3 gif      400    310 sRGB       TRUE         0 72x72   #> 4 gif      400    310 sRGB       TRUE         0 72x72   #> 5 gif      400    310 sRGB       TRUE         0 72x72   #> 6 gif      400    310 sRGB       TRUE         0 72x72   #> 7 gif      400    310 sRGB       TRUE         0 72x72   #> 8 gif      400    310 sRGB       TRUE         0 72x72   # Simple 4x3 montage input <- rep(logo, 12) image_montage(input, geometry = 'x100+10+10', tile = '4x3', bg = 'pink', shadow = TRUE) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 \"\"       600    372 sRGB       FALSE        0 72x72    # With varying frame size input <- c(wizard, wizard, logo, logo) image_montage(input, tile = '2x2', bg = 'pink', gravity = 'southwest') #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 \"\"       256    252 sRGB       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/as_EBImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to EBImage — as_EBImage","title":"Convert to EBImage — as_EBImage","text":"Convert Magick image EBImage class. Note EBImage supports multi-frame images greyscale.","code":""},{"path":"https://docs.ropensci.org/magick/reference/as_EBImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to EBImage — as_EBImage","text":"","code":"as_EBImage(image)"},{"path":"https://docs.ropensci.org/magick/reference/as_EBImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to EBImage — as_EBImage","text":"image magick image object returned image_read() image_graph()","code":""},{"path":"https://docs.ropensci.org/magick/reference/attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Attributes — attributes","title":"Image Attributes — attributes","text":"Attributes properties image might present images might affect image manipulation methods.","code":""},{"path":"https://docs.ropensci.org/magick/reference/attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Attributes — attributes","text":"","code":"image_comment(image, comment = NULL)  image_info(image)"},{"path":"https://docs.ropensci.org/magick/reference/attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Attributes — attributes","text":"image magick image object returned image_read() image_graph() comment string set image comment","code":""},{"path":"https://docs.ropensci.org/magick/reference/attributes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Attributes — attributes","text":"attribute can get set function. image_info() function returns data frame commonly used attributes.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/autoviewer.html","id":null,"dir":"Reference","previous_headings":"","what":"RStudio Graphics AutoViewer — autoviewer","title":"RStudio Graphics AutoViewer — autoviewer","text":"enables addTaskCallback automatically updates viewer state magick graphics device changed. enabled default RStudio.","code":""},{"path":"https://docs.ropensci.org/magick/reference/autoviewer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RStudio Graphics AutoViewer — autoviewer","text":"","code":"autoviewer_enable()  autoviewer_disable()"},{"path":"https://docs.ropensci.org/magick/reference/autoviewer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RStudio Graphics AutoViewer — autoviewer","text":"","code":"# Only has effect in RStudio (or other GUI with a viewer): autoviewer_enable()  img <- magick::image_graph() plot(1) abline(0, 1, col = \"blue\", lwd = 2, lty = \"solid\") abline(0.1, 1, col = \"red\", lwd = 3, lty = \"dotted\")  autoviewer_disable() abline(0.2, 1, col = \"green\", lwd = 4, lty = \"twodash\") abline(0.3, 1, col = \"black\", lwd = 5, lty = \"dotdash\")  autoviewer_enable() abline(0.4, 1, col = \"purple\", lwd = 6, lty = \"dashed\") abline(0.5, 1, col = \"yellow\", lwd = 7, lty = \"longdash\")"},{"path":"https://docs.ropensci.org/magick/reference/color.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Color — color","title":"Image Color — color","text":"Functions adjust contrast, brightness, colors image. Details .","code":""},{"path":"https://docs.ropensci.org/magick/reference/color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Color — color","text":"","code":"image_modulate(image, brightness = 100, saturation = 100, hue = 100)  image_quantize(   image,   max = 256,   colorspace = \"rgb\",   dither = TRUE,   treedepth = NULL )  image_map(image, map, dither = FALSE)  image_ordered_dither(image, threshold_map)  image_channel(image, channel = \"lightness\")  image_separate(image, channel = \"default\")  image_combine(image, colorspace = \"sRGB\", channel = \"default\")  image_transparent(image, color, fuzz = 0)  image_background(image, color, flatten = TRUE)  image_colorize(image, opacity, color)  image_contrast(image, sharpen = 1)  image_normalize(image)  image_enhance(image)  image_equalize(image)  image_median(image, radius = 1)"},{"path":"https://docs.ropensci.org/magick/reference/color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Color — color","text":"image magick image object returned image_read() image_graph() brightness modulation brightness percentage current value (100 change) saturation modulation saturation percentage current value (100 change) hue modulation hue absolute rotation -180 degrees +180 degrees current position corresponding argument range 0 200 (100 change) max preferred number colors image. actual number colors image may less request, never . colorspace string colorspace colorspace_types example \"gray\", \"rgb\" \"cmyk\" dither boolean (defaults TRUE) specifying whether apply Floyd/Steinberg error diffusion image: averages intensities several neighboring pixels treedepth depth quantization color classification tree. Values 0 1 allow selection optimal tree depth color reduction algorithm. Values 2 8 may used manually adjust tree depth. map reference image map colors threshold_map string giving dithering pattern use. See ImageMagick documentation possible values channel string channel channel_types example \"alpha\" \"hue\" \"cyan\" color valid color string \"navyblue\" \"#000080\". Use \"none\" transparency. fuzz relative color distance (value 0 100) considered similar filling algorithm flatten image flattened writing? also replaces transparency background color. opacity percentage opacity used coloring sharpen enhance intensity differences image radius replace pixel median color circular neighborhood","code":""},{"path":"https://docs.ropensci.org/magick/reference/color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Color — color","text":"details see Magick++ STL documentation. Short descriptions: image_modulate adjusts brightness, saturation hue image relative current. image_quantize reduces number unique colors image. image_ordered_dither reduces number unique colors using dithering threshold map. image_map replaces colors image closest color reference image. image_channel extracts single channel image returns grayscale. image_transparent sets pixels approximately matching given color transparent. image_background sets background color. image flattened, transparent pixels get background color. image_colorize overlays solid color frame using specified opacity. image_contrast enhances intensity differences image image_normalize increases contrast normalizing pixel values span full range colors image_enhance tries minimize noise image_equalize equalizes using histogram equalization image_median replaces pixel median color circular neighborhood Note colors also determined image properties imagetype colorspace can modified via image_convert().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Color — color","text":"","code":"# manually adjust colors logo <- image_read(\"logo:\") image_modulate(logo, brightness = 200) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_modulate(logo, saturation = 150) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_modulate(logo, hue = 200) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72    # Reduce image to 10 different colors using various spaces image_quantize(logo, max = 10, colorspace = 'gray') #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72   image_quantize(logo, max = 10, colorspace = 'rgb') #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 RGB        FALSE        0 72x72   image_quantize(logo, max = 10, colorspace = 'cmyk') #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 CMYK       FALSE        0 72x72    image_ordered_dither(logo, 'o8x8') #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   # Change background color translogo <- image_transparent(logo, 'white') image_background(translogo, \"pink\", flatten = TRUE) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       TRUE         0 72x72    # Compare to flood-fill method: image_fill(logo, \"pink\", fuzz = 20) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72    # Other color tweaks image_colorize(logo, 50, \"red\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_contrast(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_normalize(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_enhance(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_equalize(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_median(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72    # Alternate way to convert into black-white image_convert(logo, type = 'grayscale') #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/composite.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Composite — composite","title":"Image Composite — composite","text":"Similar ImageMagick composite utility: compose image top another one using CompositeOperator.","code":""},{"path":"https://docs.ropensci.org/magick/reference/composite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Composite — composite","text":"","code":"image_composite(   image,   composite_image,   operator = \"atop\",   offset = \"+0+0\",   gravity = \"northwest\",   compose_args = \"\" )  image_border(image, color = \"lightgray\", geometry = \"10x10\", operator = \"copy\")  image_frame(image, color = \"lightgray\", geometry = \"25x25+6+6\")  image_shadow_mask(image, geometry = \"50x10+30+30\")  image_shadow(   image,   color = \"black\",   bg = \"none\",   geometry = \"50x10+30+30\",   operator = \"copy\",   offset = \"+20+20\" )  image_shade(image, azimuth = 30, elevation = 30, color = FALSE)"},{"path":"https://docs.ropensci.org/magick/reference/composite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Composite — composite","text":"image magick image object returned image_read() image_graph() composite_image composition image operator string composite operator compose_types() offset string either gravity_type geometry_point set position top image. gravity string gravity value gravity_types. compose_args additional arguments needed composite operations color Set true shade red, green, blue components image. geometry geometry string set height width border, e.g. \"10x8\". addition image_frame allows adding shadow setting offset e.g. \"20x10+7+2\". bg background color azimuth position light source elevation position light source","code":""},{"path":"https://docs.ropensci.org/magick/reference/composite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Composite — composite","text":"image_composite function vectorized image arguments: first image n frames second m frames, output image contain n * m frames. image_border function creates slightly larger solid color frame composes original frame top. image_frame function similar additional feature create shadow effect border (really ugly).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/composite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Composite — composite","text":"","code":"# Compose images using one of many operators imlogo <- image_scale(image_read(\"logo:\"), \"x275\") rlogo <- image_read(\"https://jeroen.github.io/images/Rlogo-old.png\")  # Standard is atop image_composite(imlogo, rlogo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      367    275 sRGB       FALSE        0 72x72    # Same as 'blend 50' in the command line image_composite(imlogo, rlogo, operator = \"blend\", compose_args=\"50\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      367    275 sRGB       FALSE        0 72x72    # Offset can be geometry or gravity image_composite(logo, rose, offset = \"+100+100\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_composite(logo, rose, gravity = \"East\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72    # Add a border frame around the image image_border(imlogo, \"red\", \"10x10\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      387    295 sRGB       FALSE        0 72x72   image_frame(imlogo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      417    325 sRGB       FALSE        0 72x72   image_shadow(imlogo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      417    325 sRGB       TRUE         0 72x72   image_shade(imlogo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      367    275 sRGB       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Magick Configuration — coder_info","title":"Magick Configuration — coder_info","text":"ImageMagick can configured support various additional tool formats via external libraries. functions show features ImageMagick supports system.","code":""},{"path":"https://docs.ropensci.org/magick/reference/config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magick Configuration — coder_info","text":"","code":"coder_info(format)  magick_config()  magick_set_seed(seed)"},{"path":"https://docs.ropensci.org/magick/reference/config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magick Configuration — coder_info","text":"format image format png, tiff pdf. seed integer seed value use","code":""},{"path":"https://docs.ropensci.org/magick/reference/config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Magick Configuration — coder_info","text":"Note coder_info raises error unsupported formats.","code":""},{"path":"https://docs.ropensci.org/magick/reference/config.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Magick Configuration — coder_info","text":"https://www.imagemagick.org/Magick++/CoderInfo.html","code":""},{"path":"https://docs.ropensci.org/magick/reference/config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magick Configuration — coder_info","text":"","code":"coder_info(\"png\") #> $name #> [1] \"PNG\" #>  #> $description #> [1] \"Portable Network Graphics\" #>  #> $isReadable #> [1] \"TRUE\" #>  #> $isWritable #> [1] \"TRUE\" #>  #> $isMultiFrame #> [1] \"FALSE\" #>  coder_info(\"jpg\") #> $name #> [1] \"JPG\" #>  #> $description #> [1] \"Joint Photographic Experts Group JFIF format\" #>  #> $isReadable #> [1] \"TRUE\" #>  #> $isWritable #> [1] \"TRUE\" #>  #> $isMultiFrame #> [1] \"FALSE\" #>  coder_info(\"pdf\") #> $name #> [1] \"PDF\" #>  #> $description #> [1] \"Portable Document Format\" #>  #> $isReadable #> [1] \"TRUE\" #>  #> $isWritable #> [1] \"TRUE\" #>  #> $isMultiFrame #> [1] \"TRUE\" #>  coder_info(\"tiff\") #> $name #> [1] \"TIFF\" #>  #> $description #> [1] \"Tagged Image File Format\" #>  #> $isReadable #> [1] \"TRUE\" #>  #> $isWritable #> [1] \"TRUE\" #>  #> $isMultiFrame #> [1] \"TRUE\" #>  coder_info(\"gif\") #> $name #> [1] \"GIF\" #>  #> $description #> [1] \"CompuServe graphics interchange format\" #>  #> $isReadable #> [1] \"TRUE\" #>  #> $isWritable #> [1] \"TRUE\" #>  #> $isMultiFrame #> [1] \"TRUE\" #>  # Reproduce random image magick_set_seed(123) image_blank(200,200, pseudo_image = \"plasma:fractal\") #> # A tibble: 1 × 7 #>   format   width height colorspace matte filesize density #>   <chr>    <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GRADIENT   200    200 sRGB       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/defines.html","id":null,"dir":"Reference","previous_headings":"","what":"Set encoder defines — defines","title":"Set encoder defines — defines","text":"called 'defines' properties passed along external filters libraries. Usually defines used image_read image_write control image encoder/decoder, can also set manually image object.","code":""},{"path":"https://docs.ropensci.org/magick/reference/defines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set encoder defines — defines","text":"","code":"image_set_defines(image, defines)"},{"path":"https://docs.ropensci.org/magick/reference/defines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set encoder defines — defines","text":"image magick image object returned image_read() image_graph() defines named character vector extra options control reading. -define key{=value} settings command line tool. Use empty string value-less defines, NA unset define.","code":""},{"path":"https://docs.ropensci.org/magick/reference/defines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set encoder defines — defines","text":"defines values must character string, names contain defines keys. name must format \"enc:key\" first part encoder filter key passed. example \"png:....\" defines can control encoding decoding png images. image_set_defines function make copy image, defined values remain image object overwritten unset.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/defines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set encoder defines — defines","text":"","code":"# Write an image x <- image_read(\"https://jeroen.github.io/images/frink.png\") image_write(x, \"frink.png\")  # Pass some properties to PNG encoder defines <- c(\"png:compression-filter\" = \"1\", \"png:compression-level\" = \"0\") image_set_defines(x, defines) image_write(x, \"frink-uncompressed.png\")  # Unset properties defines[1:2] = NA image_set_defines(x, defines) image_write(x, \"frink-final.png\")  # Compare size and cleanup file.info(c(\"frink.png\", \"frink-uncompressed.png\", \"frink-final.png\")) #>                          size isdir mode               mtime #> frink.png               67162 FALSE  644 2024-03-21 12:22:25 #> frink-uncompressed.png 392531 FALSE  644 2024-03-21 12:22:25 #> frink-final.png         67162 FALSE  644 2024-03-21 12:22:25 #>                                      ctime               atime uid gid uname #> frink.png              2024-03-21 12:22:25 2024-03-21 12:22:25   0   0  root #> frink-uncompressed.png 2024-03-21 12:22:25 2024-03-21 12:22:25   0   0  root #> frink-final.png        2024-03-21 12:22:25 2024-03-21 12:22:25   0   0  root #>                        grname #> frink.png                root #> frink-uncompressed.png   root #> frink-final.png          root unlink(c(\"frink.png\", \"frink-uncompressed.png\", \"frink-final.png\"))"},{"path":"https://docs.ropensci.org/magick/reference/device.html","id":null,"dir":"Reference","previous_headings":"","what":"Magick Graphics Device — device","title":"Magick Graphics Device — device","text":"Graphics device produces Magick image. Can either used like regular device making plots, alternatively via image_draw open device draws onto existing image using pixel coordinates. latter vectorized, .e. drawing operations applied frame image.","code":""},{"path":"https://docs.ropensci.org/magick/reference/device.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magick Graphics Device — device","text":"","code":"image_graph(   width = 800,   height = 600,   bg = \"white\",   pointsize = 12,   res = 72,   clip = TRUE,   antialias = TRUE )  image_draw(image, pointsize = 12, res = 72, antialias = TRUE, ...)  image_capture()"},{"path":"https://docs.ropensci.org/magick/reference/device.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magick Graphics Device — device","text":"width pixels height pixels bg background color pointsize size fonts res resolution pixels clip enable clipping device. clipping can slow things lot, can disable need . antialias TRUE/FALSE: enables anti-aliasing text strokes image existing image start drawing ... additional device parameters passed plot.window xlim, ylim, mar.","code":""},{"path":"https://docs.ropensci.org/magick/reference/device.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Magick Graphics Device — device","text":"device relatively recent feature package. support operations might still small inaccuracies. Also bit slower devices, particular rendering text clipping. Hopefully can optimized next version. default image_draw sets margins 0 uses graphics coordinates match image size pixels (width x height) (0,0) top left corner. Note means y axis increases top bottom opposite typical graphics coordinates.  can override passing custom xlim, ylim mar values image_draw. image_capture function returns current device image. works current device magick device supports dev.capture.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/device.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magick Graphics Device — device","text":"","code":"# Regular image frink <- image_read(\"https://jeroen.github.io/images/frink.png\")  # Produce image using graphics device fig <- image_graph(res = 96) ggplot2::qplot(mpg, wt, data = mtcars, colour = cyl) #> Warning: `qplot()` was deprecated in ggplot2 3.4.0. dev.off() #> agg_png  #>       2   # Combine out <- image_composite(fig, frink, offset = \"+70+30\") print(out) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      800    600 sRGB       TRUE         0 96x96    # Or paint over an existing image img <- image_draw(frink) rect(20, 20, 200, 100, border = \"red\", lty = \"dashed\", lwd = 5) abline(h = 300, col = 'blue', lwd = '10', lty = \"dotted\") text(10, 250, \"Hoiven-Glaven\", family = \"monospace\", cex = 4, srt = 90) palette(rainbow(11, end = 0.9)) symbols(rep(200, 11), seq(0, 400, 40), circles = runif(11, 5, 35),   bg = 1:11, inches = FALSE, add = TRUE) dev.off() #> agg_png  #>       2  print(img) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      220    445 sRGB       TRUE         0 72x72    # \\donttest{ # Vectorized example with custom coordinates earth <- image_read(\"https://jeroen.github.io/images/earth.gif\") img <- image_draw(earth, xlim = c(0,1), ylim = c(0,1)) rect(.1, .1, .9, .9, border = \"red\", lty = \"dashed\", lwd = 5) text(.5, .9, \"Our planet\", cex = 3, col = \"white\") dev.off() #> agg_png  #>       2  print(img) #> # A tibble: 44 × 7 #>    format width height colorspace matte filesize density #>    <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #>  1 GIF      400    400 sRGB       TRUE         0 72x72   #>  2 GIF      400    400 sRGB       TRUE         0 72x72   #>  3 GIF      400    400 sRGB       TRUE         0 72x72   #>  4 GIF      400    400 sRGB       TRUE         0 72x72   #>  5 GIF      400    400 sRGB       TRUE         0 72x72   #>  6 GIF      400    400 sRGB       TRUE         0 72x72   #>  7 GIF      400    400 sRGB       TRUE         0 72x72   #>  8 GIF      400    400 sRGB       TRUE         0 72x72   #>  9 GIF      400    400 sRGB       TRUE         0 72x72   #> 10 GIF      400    400 sRGB       TRUE         0 72x72   #> # ℹ 34 more rows # }"},{"path":"https://docs.ropensci.org/magick/reference/edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge / Line Detection — edges","title":"Edge / Line Detection — edges","text":"Best results obtained finding edges image_canny() performing Hough-line detection edge image.","code":""},{"path":"https://docs.ropensci.org/magick/reference/edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge / Line Detection — edges","text":"","code":"image_edge(image, radius = 1)  image_canny(image, geometry = \"0x1+10%+30%\")  image_hough_draw(   image,   geometry = NULL,   color = \"red\",   bg = \"transparent\",   size = 3,   overlay = FALSE )  image_hough_txt(image, geometry = NULL, format = c(\"mvg\", \"svg\"))"},{"path":"https://docs.ropensci.org/magick/reference/edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge / Line Detection — edges","text":"image magick image object returned image_read() image_graph() radius edge size pixels geometry geometry string, see details. color valid color string \"navyblue\" \"#000080\". Use \"none\" transparency. bg background color size size points draw line overlay composite drawing atop input image. bg = 'transparent'. format output format text, either svg mvg","code":""},{"path":"https://docs.ropensci.org/magick/reference/edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Edge / Line Detection — edges","text":"Hough-line detection, geometry format {W}x{H}+{threshold} defining size threshold filter used find 'peaks' intermediate search image. canny edge detection format {radius}x{sigma}+{lower%}+{upper%}. details examples available imagemagick website.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edge / Line Detection — edges","text":"","code":"if(magick_config()$version > \"6.8.9\"){ shape <- demo_image(\"shape_rectangle.gif\") rectangle <- image_canny(shape) rectangle |> image_hough_draw('5x5+20') rectangle |> image_hough_txt(format = 'svg') |> cat() } #> <?xml version=\"1.0\" standalone=\"no\"?> #> <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 20010904//EN\" #>   \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"> #> <svg width=\"100\" height=\"100\"> #> <desc>Hough line transform: 5x5+20<\/desc> #> <desc>x1,y1  x2,y2 # count angle distance<\/desc> #>   <line x1=\"50.5774\" y1=\"0\" x2=\"-7.15768\" y2=\"100\"/> #> <desc>22 30 46<\/desc> #>   <line x1=\"0\" y1=\"7.99262\" x2=\"100\" y2=\"63.4235\"/> #> <desc>35 119 58<\/desc> #>   <line x1=\"0\" y1=\"6.54068\" x2=\"100\" y2=\"66.6267\"/> #> <desc>35 121 59<\/desc> #>   <line x1=\"0\" y1=\"35.5662\" x2=\"100\" y2=\"93.3013\"/> #> <desc>50 120 83<\/desc> #>   <line x1=\"108.312\" y1=\"0\" x2=\"50.5774\" y2=\"100\"/> #> <desc>24 30 96<\/desc> #> <\/svg>"},{"path":"https://docs.ropensci.org/magick/reference/editing.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Editing — editing","title":"Image Editing — editing","text":"Read, write join combine images. image functions vectorized, meaning operate either single frame series frames (e.g. collage, video, animation). Besides paths URLs, image_read() supports commonly used bitmap raster object types.","code":""},{"path":"https://docs.ropensci.org/magick/reference/editing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Editing — editing","text":"","code":"image_read(   path,   density = NULL,   depth = NULL,   strip = FALSE,   coalesce = TRUE,   defines = NULL )  image_read_svg(path, width = NULL, height = NULL)  image_read_pdf(path, pages = NULL, density = 300, password = \"\")  image_read_video(path, fps = 1, format = \"png\")  image_write(   image,   path = NULL,   format = NULL,   quality = NULL,   depth = NULL,   density = NULL,   comment = NULL,   flatten = FALSE,   defines = NULL,   compression = NULL )  image_convert(   image,   format = NULL,   type = NULL,   colorspace = NULL,   depth = NULL,   antialias = NULL,   matte = NULL,   interlace = NULL )  image_data(image, channels = NULL, frame = 1)  image_raster(image, frame = 1, tidy = TRUE)  image_display(image, animate = TRUE)  image_browse(image, browser = getOption(\"browser\"))  image_strip(image)  image_blank(width, height, color = \"none\", pseudo_image = \"\", defines = NULL)  image_destroy(image)  image_join(...)  image_attributes(image)  image_get_artifact(image, artifact = \"\")  demo_image(path)"},{"path":"https://docs.ropensci.org/magick/reference/editing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Editing — editing","text":"path file, url, raster object bitmap array density resolution render pdf svg depth color depth (either 8 16) strip drop image comments metadata coalesce automatically image_coalesce() gif images defines named character vector extra options control reading. -define key{=value} settings command line tool. Use empty string value-less defines, NA unset define. width pixels height pixels pages integer vector page numbers. Defaults pages. password user password open protected pdf files fps many images capture per second video. Set NULL get frames input video. format output format \"png\", \"jpeg\", \"gif\", \"rgb\" \"rgba\". image magick image object returned image_read() image_graph() quality number 0 100 jpeg quality. Defaults 75. comment text string added image metadata supported formats flatten image flattened writing? also replaces transparency background color. compression string compression type compress_types type string imagetype value image_types example grayscale convert black/white colorspace string colorspace colorspace_types example \"gray\", \"rgb\" \"cmyk\" antialias enable anti-aliasing text strokes matte set TRUE FALSE enable disable transparency interlace string interlace channels string image channel(s) example \"rgb\", \"rgba\", \"cmyk\",\"gray\", \"ycbcr\". Default either \"gray\", \"rgb\" \"rgba\" depending image frame integer setting frame extract image tidy converts raster data long form use geom_raster. FALSE output .raster(). animate support animations X11 display browser argument passed browseURL color valid color string \"navyblue\" \"#000080\". Use \"none\" transparency. pseudo_image string pseudo image specification example \"radial-gradient:purple-yellow\" ... several images lists images combined artifact string name artifact extract, see image_deskew example.","code":""},{"path":"https://docs.ropensci.org/magick/reference/editing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Editing — editing","text":"standard base vector methods [, [[, c(), .list(), .raster(), rev(), length(), print() can used work magick image objects. Use standard img[] syntax extract subset frames image. img[[]] method alias image_data() extracts single frame raw bitmap matrix pixel values. reading svg pdf recommended use image_read_svg() image_read_pdf() rsvg pdftools R packages available. functions provide rendering options (including rendering literal svg) better quality built-svg/pdf rendering delegates imagemagick . X11 required image_display() works platforms. portable method image_browse() opens image browser. RStudio embedded viewer automatically quite nice. Image objects automatically released garbage collector longer reachable. GC runs , can also call image_destroy() explicitly release memory immediately. usually needed create lot images short period time, might run memory.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/editing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Editing — editing","text":"","code":"# Download image from the web frink <- image_read(\"https://jeroen.github.io/images/frink.png\") worldcup_frink <- image_fill(frink, \"orange\", \"+100+200\", 20) image_write(worldcup_frink, \"output.png\")  # extract raw bitmap array bitmap <- frink[[1]]  # replace pixels with #FF69B4 ('hot pink') and convert back to image bitmap[,50:100, 50:100] <- as.raw(c(0xff, 0x69, 0xb4, 0xff)) image_read(bitmap) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      220    445 sRGB       TRUE         0 72x72    # Plot to graphics device via legacy raster format raster <- as.raster(frink) par(ask=FALSE) plot(raster)   # Read bitmap arrays from other image packages download.file(\"https://jeroen.github.io/images/example.webp\", \"example.webp\", mode = 'wb') if(require(webp)) image_read(webp::read_webp(\"example.webp\")) #> Loading required package: webp #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      550    404 sRGB       TRUE         0 72x72   unlink(c(\"example.webp\", \"output.png\")) if(require(rsvg)){ tiger <- image_read_svg(\"http://jeroen.github.io/images/tiger.svg\") svgtxt <- '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <svg width=\"400\" height=\"400\" viewBox=\"0 0 400 400\" fill=\"none\">  <circle fill=\"steelblue\" cx=\"200\" cy=\"200\" r=\"100\" />  <circle fill=\"yellow\" cx=\"200\" cy=\"200\" r=\"90\" /> <\/svg>' circles <- image_read_svg(svgtxt) } #> Loading required package: rsvg #> Warning: package ‘rsvg’ was built under R version 4.3.3 #> Linking to librsvg 2.52.5 if(require(pdftools)) image_read_pdf(file.path(R.home('doc'), 'NEWS.pdf'), pages = 1, density = 100) #> Loading required package: pdftools #> Warning: package ‘pdftools’ was built under R version 4.3.3 #> Using poppler version 22.02.0 #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      850   1100 sRGB       TRUE         0 100x100 # create a solid canvas image_blank(600, 400, \"green\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 png      600    400 sRGB       FALSE        0 72x72   image_blank(600, 400, pseudo_image = \"radial-gradient:purple-yellow\") #> # A tibble: 1 × 7 #>   format          width height colorspace matte filesize density #>   <chr>           <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 RADIAL-GRADIENT   600    400 sRGB       FALSE        0 72x72   image_blank(200, 200, pseudo_image = \"gradient:#3498db-#db3a34\",   defines = c('gradient:direction' = 'east')) #> # A tibble: 1 × 7 #>   format   width height colorspace matte filesize density #>   <chr>    <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GRADIENT   200    200 sRGB       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Effects — effects","title":"Image Effects — effects","text":"High level effects applied entire image. mostly just fun.","code":""},{"path":"https://docs.ropensci.org/magick/reference/effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Effects — effects","text":"","code":"image_despeckle(image, times = 1L)  image_reducenoise(image, radius = 1L)  image_noise(image, noisetype = \"gaussian\")  image_blur(image, radius = 1, sigma = 0.5)  image_motion_blur(image, radius = 1, sigma = 0.5, angle = 0)  image_charcoal(image, radius = 1, sigma = 0.5)  image_oilpaint(image, radius = 1)  image_emboss(image, radius = 1, sigma = 0.5)  image_implode(image, factor = 0.5)  image_negate(image)"},{"path":"https://docs.ropensci.org/magick/reference/effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Effects — effects","text":"image magick image object returned image_read() image_graph() times number times repeat despeckle operation radius radius, pixels, various transformations noisetype string noisetype value noise_types. sigma standard deviation Laplacian, pixels. angle angle, degrees, various transformations factor image implode factor (special effect)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Effects — effects","text":"","code":"logo <- image_read(\"logo:\") image_despeckle(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_reducenoise(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_noise(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_blur(logo, 10, 10) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_motion_blur(logo, 10, 10, 45) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_charcoal(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72   image_oilpaint(logo, radius = 3) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_emboss(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_implode(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_negate(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/fx.html","id":null,"dir":"Reference","previous_headings":"","what":"Image FX — fx","title":"Image FX — fx","text":"Apply custom fx expression image.","code":""},{"path":"https://docs.ropensci.org/magick/reference/fx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image FX — fx","text":"","code":"image_fx(image, expression = \"p\", channel = NULL)  image_fx_sequence(image, expression = \"p\")"},{"path":"https://docs.ropensci.org/magick/reference/fx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image FX — fx","text":"image magick image object returned image_read() image_graph() expression string fx expression channel value channel_types() specifying channel(s) set","code":""},{"path":"https://docs.ropensci.org/magick/reference/fx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image FX — fx","text":"two different interfaces. image_fx function simply applies fx frame input image. image_fx_sequence function hand treats entire input vector sequence, allowing apply expression multiple input images. See examples.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/fx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image FX — fx","text":"","code":"# Show image_fx() expression img <- image_convert(logo, colorspace = \"Gray\") gradient_x <- image_convolve(img, kernel = \"Prewitt\") gradient_y <- image_convolve(img, kernel = \"Prewitt:90\") gradient <- c(image_fx(gradient_x, expression = \"p^2\"),                 image_fx(gradient_y, expression = \"p^2\")) gradient <- image_flatten(gradient, operator = \"Plus\") #gradient <- image_fx(gradient, expression = \"sqrt(p)\") gradient #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 RGB        FALSE        0 72x72    # \\donttest{ image_fx(img, expression = \"pow(p, 0.5)\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72   image_fx(img, expression = \"rand()\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72   # } # Use multiple source images # \\donttest{ input <- c(logo, image_flop(logo)) image_fx_sequence(input, \"(u+v)/2\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   # }"},{"path":"https://docs.ropensci.org/magick/reference/geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometry Helpers — geometry","title":"Geometry Helpers — geometry","text":"ImageMagick uses handy geometry syntax specify coordinates shapes use image transformations. can either specify manually strings use helper functions .","code":""},{"path":"https://docs.ropensci.org/magick/reference/geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometry Helpers — geometry","text":"","code":"geometry_point(x, y)  geometry_area(width = NULL, height = NULL, x_off = 0, y_off = 0)  geometry_size_pixels(width = NULL, height = NULL, preserve_aspect = TRUE)  geometry_size_percent(width = 100, height = NULL)"},{"path":"https://docs.ropensci.org/magick/reference/geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometry Helpers — geometry","text":"x left offset pixels y top offset pixels width pixels height pixels x_off offset pixels x axis y_off offset pixels y axis preserve_aspect FALSE, resize width height exactly, loosing original aspect ratio. one percent preserve_aspect may TRUE.","code":""},{"path":"https://docs.ropensci.org/magick/reference/geometry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geometry Helpers — geometry","text":"See ImageMagick Manual details syntax specification. Examples geometry strings: \"500x300\"       -- Resize image keeping aspect ratio, width exceed 500 height exceed 300. \"500x300!\"      -- Resize image 500 300, ignoring aspect ratio \"500x\"          -- Resize width 500 keep aspect ratio \"x300\"          -- Resize height 300 keep aspect ratio \"50%x20%\" -- Resize width 50 percent height 20 percent original \"500x300+10+20\" -- Crop image 500 300 position 10,20","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geometry Helpers — geometry","text":"","code":"# Specify a point logo <- image_read(\"logo:\") image_annotate(logo, \"Some text\", location = geometry_point(100, 200), size = 24) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       TRUE         0 72x72    # Specify image area image_crop(logo, geometry_area(300, 300), repage = FALSE) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      300    300 sRGB       FALSE        0 72x72   image_crop(logo, geometry_area(300, 300, 100, 100), repage = FALSE) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      300    300 sRGB       FALSE        0 72x72    # Specify image size image_resize(logo, geometry_size_pixels(300)) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      300    225 sRGB       FALSE        0 72x72   image_resize(logo, geometry_size_pixels(height = 300)) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      400    300 sRGB       FALSE        0 72x72   image_resize(logo, geometry_size_pixels(300, 300, preserve_aspect = FALSE)) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      300    300 sRGB       FALSE        0 72x72    # resize relative to current size image_resize(logo, geometry_size_percent(50)) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      320    240 sRGB       FALSE        0 72x72   image_resize(logo, geometry_size_percent(50, 20)) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      320     96 sRGB       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/image_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Image to ggplot — image_ggplot","title":"Image to ggplot — image_ggplot","text":"Create ggplot axes set pixel coordinates plot raster image using ggplot2::annotation_raster. See examples plot image onto existing ggplot.","code":""},{"path":"https://docs.ropensci.org/magick/reference/image_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image to ggplot — image_ggplot","text":"","code":"image_ggplot(image, interpolate = FALSE)"},{"path":"https://docs.ropensci.org/magick/reference/image_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image to ggplot — image_ggplot","text":"image magick image object returned image_read() image_graph() interpolate passed ggplot2::annotation_raster","code":""},{"path":"https://docs.ropensci.org/magick/reference/image_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image to ggplot — image_ggplot","text":"","code":"# Plot with base R plot(logo)   # Plot image with ggplot2 library(ggplot2) myplot <- image_ggplot(logo) myplot + ggtitle(\"Test plot\")   # Show that coordinates are reversed: myplot + theme_classic()   # Or add to plot as annotation image <- image_fill(logo, 'none') raster <- as.raster(image) myplot <- qplot(mpg, wt, data = mtcars) myplot + annotation_raster(raster, 25, 35, 3, 5)   # Or overplot image using grid library(grid) qplot(speed, dist, data = cars, geom = c(\"point\", \"smooth\")) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' grid.raster(image)"},{"path":"https://docs.ropensci.org/magick/reference/magick.html","id":null,"dir":"Reference","previous_headings":"","what":"Magick Image Processing — _index_","title":"Magick Image Processing — _index_","text":"magick package graphics image processing R. Important resources: R introduction vignette: getting started Magick++ API Magick++ STL detailed descriptions methods parameters","code":""},{"path":"https://docs.ropensci.org/magick/reference/magick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Magick Image Processing — _index_","text":"Documentation split following pages: analysis - metrics calculations: compare, fft animation - manipulate combine multiple frames: animate, morph, mosaic, montage, average, append, apply attributes - image properties: comment, info color - contrast, brightness, colors: modulate, quantize, map, transparent, background, colorize, contrast, normalize, enhance, equalize, median composite - advanced joining: composite, border, frame device - creating graphics drawing images editing - basic image IO: read, write, convert, join, display, brose effects - fun effects: despecle, reducenoise, noise, blur, charcoal, edge, oilpaint, emboss, implode, negate geometry - specify points, areas sizes using geometry syntax ocr - extract text image using tesseract package options - list option types values supported version ImageMagick painting - flood fill annotating text transform - shape operations: trim, chop, rotate, resize, scale, sample crop, flip, flop, deskew, page","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/morphology.html","id":null,"dir":"Reference","previous_headings":"","what":"Morphology — morphology","title":"Morphology — morphology","text":"Apply morphology method. flexible function can used apply morphology method custom parameters. See imagemagick website examples.","code":""},{"path":"https://docs.ropensci.org/magick/reference/morphology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Morphology — morphology","text":"","code":"image_morphology(   image,   method = \"convolve\",   kernel = \"Gaussian\",   iterations = 1,   opts = list() )  image_convolve(   image,   kernel = \"Gaussian\",   iterations = 1,   scaling = NULL,   bias = NULL )"},{"path":"https://docs.ropensci.org/magick/reference/morphology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Morphology — morphology","text":"image magick image object returned image_read() image_graph() method string valid method morphology_types() kernel either square matrix string. string can either parameterized kerneltype : \"DoG:0,0,2\" \"Diamond\" can contain custom matrix (see examples) iterations number iterations opts named list character vector custom attributes scaling string kernel scaling. special flag \"!\" automatically scales full dynamic range, example: \"50%!\" bias output bias string, example \"50%\"","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/morphology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Morphology — morphology","text":"","code":"#example from IM website: if(magick_config()$version > \"6.8.8\"){ pixel <- image_blank(1, 1, 'white') |> image_border('black', '5x5')  # See the effect of Dilate method pixel |> image_scale('800%') pixel |> image_morphology('Dilate', \"Diamond\") |> image_scale('800%')  # These produce the same output: pixel |> image_morphology('Dilate', \"Diamond\", iter = 3) |> image_scale('800%') pixel |> image_morphology('Dilate', \"Diamond:3\") |> image_scale('800%')  # Plus example pixel |> image_morphology('Dilate', \"Plus\", iterations = 2) |> image_scale('800%')  # Rose examples rose |> image_morphology('ErodeI', 'Octagon', iter = 3) rose |> image_morphology('DilateI', 'Octagon', iter = 3) rose |> image_morphology('OpenI', 'Octagon', iter = 3) rose |> image_morphology('CloseI', 'Octagon', iter = 3)  # Edge detection man <- demo_image('man.gif') man |> image_morphology('EdgeIn', 'Octagon') man |> image_morphology('EdgeOut', 'Octagon') man |> image_morphology('Edge', 'Octagon')  # Octagonal Convex Hull  man |>    image_morphology('Close', 'Diamond') |>    image_morphology('Thicken', 'ConvexHull', iterations = 1)  # Thinning down to a Skeleton man |> image_morphology('Thinning', 'Skeleton', iterations = 1)  # Specify custom kernel matrix usingn a string: img <- demo_image(\"test_mag.gif\") i <- image_convolve(img, kernel = '4x5:        0 -1  0  0       -1 +1 -1  0       -1 +1 -1  0       -1 +1 +1 -1        0 -1 -1  0 ', bias = \"50%\") }"},{"path":"https://docs.ropensci.org/magick/reference/ocr.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Text OCR — ocr","title":"Image Text OCR — ocr","text":"Extract text image using tesseract package.","code":""},{"path":"https://docs.ropensci.org/magick/reference/ocr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Text OCR — ocr","text":"","code":"image_ocr(image, language = \"eng\", HOCR = FALSE, ...)  image_ocr_data(image, language = \"eng\", ...)"},{"path":"https://docs.ropensci.org/magick/reference/ocr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Text OCR — ocr","text":"image magick image object returned image_read() image_graph() language passed tesseract. install additional languages see instructions tesseract_download(). HOCR TRUE return results HOCR xml instead plain text ... additional parameters passed tesseract","code":""},{"path":"https://docs.ropensci.org/magick/reference/ocr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Text OCR — ocr","text":"use function need tesseract first:   Best results obtained set correct language tesseract. install additional languages see instructions tesseract_download().","code":"install.packages(\"tesseract\")"},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/ocr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Text OCR — ocr","text":"","code":"# \\donttest{ if(require(\"tesseract\")){ img <- image_read(\"http://jeroen.github.io/images/testocr.png\") image_ocr(img) image_ocr_data(img) } #> Loading required package: tesseract #> Warning: package ‘tesseract’ was built under R version 4.3.3 #> # A tibble: 60 × 3 #>    word  confidence bbox           #>    <chr>      <dbl> <chr>          #>  1 This        96.6 36,92,96,116   #>  2 is          96.9 109,92,129,116 #>  3 a           96.3 141,98,156,116 #>  4 lot         96.3 169,92,201,116 #>  5 of          96.5 212,92,240,116 #>  6 12          96.5 251,92,282,116 #>  7 point       96.5 296,92,364,122 #>  8 text        96.5 374,93,427,116 #>  9 to          96.9 437,93,463,116 #> 10 test        97.0 474,93,526,116 #> # ℹ 50 more rows # }"},{"path":"https://docs.ropensci.org/magick/reference/options.html","id":null,"dir":"Reference","previous_headings":"","what":"Magick Options — options","title":"Magick Options — options","text":"List option types values supported version ImageMagick. descriptions see ImageMagick Enumerations.","code":""},{"path":"https://docs.ropensci.org/magick/reference/options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magick Options — options","text":"","code":"magick_options()  magick_fonts()  option_types()  filter_types()  metric_types()  dispose_types()  compose_types()  colorspace_types()  channel_types()  image_types()  kernel_types()  noise_types()  gravity_types()  orientation_types()  morphology_types()  style_types()  decoration_types()  compress_types()  distort_types()  dump_option_info(option = \"font\")"},{"path":"https://docs.ropensci.org/magick/reference/options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magick Options — options","text":"option one option_types","code":""},{"path":"https://docs.ropensci.org/magick/reference/options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Magick Options — options","text":"dump_option_info function equivalent calling convert -list [option] command line. return anything, makes ImageMagick print stuff console, use debugging.","code":""},{"path":"https://docs.ropensci.org/magick/reference/options.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Magick Options — options","text":"ImageMagick Manual: Enumerations","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/painting.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Painting — painting","title":"Image Painting — painting","text":"image_fill() function performs flood-fill painting starting point neighboring pixels approximately color. Annotate prints text image.","code":""},{"path":"https://docs.ropensci.org/magick/reference/painting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Painting — painting","text":"","code":"image_fill(image, color, point = \"+1+1\", fuzz = 0, refcolor = NULL)  image_annotate(   image,   text,   gravity = \"northwest\",   location = \"+0+0\",   degrees = 0,   size = 10,   font = \"\",   style = \"normal\",   weight = 400,   kerning = 0,   decoration = NULL,   color = NULL,   strokecolor = NULL,   strokewidth = NULL,   boxcolor = NULL )"},{"path":"https://docs.ropensci.org/magick/reference/painting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Painting — painting","text":"image magick image object returned image_read() image_graph() color valid color string \"navyblue\" \"#000080\". Use \"none\" transparency. point geometry_point string indicating starting point flood-fill fuzz relative color distance (value 0 100) considered similar filling algorithm refcolor set, fuzz color distance measured color, color starting point. color (within fuzz color distance given refcolor), connected starting point replaced color. pixel starting point match given refcolor (according fuzz) action taken. text character vector length equal 'image' length 1 gravity string gravity value gravity_types. location geometry string location relative gravity degrees rotates text around center point size font-size pixels font string font family \"sans\", \"mono\", \"serif\", \"Times\", \"Helvetica\", \"Trebuchet\", \"Georgia\", \"Palatino\" \"Comic Sans\". See magick_fonts() available. style value style_types example \"italic\" weight thickness font, 400 normal 700 bold, see magick_fonts(). kerning increases decreases whitespace letters decoration value decoration_types example \"underline\" strokecolor color string adds stroke (border around text) strokewidth set strokewidth border around text boxcolor color string background color annotation text rendered .","code":""},{"path":"https://docs.ropensci.org/magick/reference/painting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Painting — painting","text":"Note sophisticated drawing mechanisms available via graphics device using image_draw. Setting font, weight, style works imagemagick compiled fontconfig support.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/painting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Painting — painting","text":"","code":"logo <- image_read(\"logo:\") logo <- image_background(logo, 'white') image_fill(logo, \"pink\", point = \"+450+400\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   image_fill(logo, \"pink\", point = \"+450+400\", fuzz = 25) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       FALSE        0 72x72   # Add some text to an image image_annotate(logo, \"This is a test\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       TRUE         0 72x72   image_annotate(logo, \"CONFIDENTIAL\", size = 50, color = \"red\", boxcolor = \"pink\",  degrees = 30, location = \"+100+100\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       TRUE         0 72x72    # Setting fonts requires fontconfig support (and that you have the font) image_annotate(logo, \"The quick brown fox\", font = \"monospace\", size = 50) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 sRGB       TRUE         0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"https://docs.ropensci.org/magick/reference/segmentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Segmentation — segmentation","title":"Image Segmentation — segmentation","text":"Basic image segmentation like connected components labelling, blob extraction fuzzy c-means","code":""},{"path":"https://docs.ropensci.org/magick/reference/segmentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Segmentation — segmentation","text":"","code":"image_connect(image, connectivity = 4)  image_split(image, keep_color = TRUE)  image_fuzzycmeans(image, min_pixels = 1, smoothing = 1.5)"},{"path":"https://docs.ropensci.org/magick/reference/segmentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Segmentation — segmentation","text":"image magick image object returned image_read() image_graph() connectivity number neighbor colors considered part unique object keep_color TRUE output images retain color input pixel. FALSE matching pixels set black retain image mask. min_pixels minimum number pixels contained hexahedra can considered valid (expressed percentage) smoothing smoothing threshold eliminates noise second derivative histogram (higher values gives smoother second derivative)","code":""},{"path":"https://docs.ropensci.org/magick/reference/segmentation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Segmentation — segmentation","text":"image_connect Connect adjacent pixels pixel intensities blob extraction image_split Splits image according pixel intensities image_fuzzycmeans Fuzzy c-means segmentation histogram color components image_connect performs blob extraction scanning image, pixel--pixel top-left bottom-right regions adjacent pixels share set intensity values get combined.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/segmentation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Segmentation — segmentation","text":"","code":"# Split an image by color img <- image_quantize(logo, 4) layers <- image_split(img) layers #> # A tibble: 4 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      640    480 sRGB       TRUE         0 72x72   #> 2 PNG      640    480 sRGB       TRUE         0 72x72   #> 3 PNG      640    480 sRGB       TRUE         0 72x72   #> 4 PNG      640    480 sRGB       TRUE         0 72x72    # This returns the original image image_flatten(layers) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      640    480 sRGB       TRUE         0 72x72    # From the IM website objects <- image_convert(demo_image(\"objects.gif\"), colorspace = \"Gray\") objects #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      256    171 Gray       FALSE        0 72x72    # \\donttest{ # Split image in blobs of connected pixel levels if(magick_config()$version > \"6.9.0\"){ objects |>   image_connect(connectivity = 4) |>   image_split()  # Fuzzy c-means image_fuzzycmeans(logo)  logo |>   image_convert(colorspace = \"HCL\") |>   image_fuzzycmeans(smoothing = 5) } #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 HCL        FALSE        0 72x72   # }"},{"path":"https://docs.ropensci.org/magick/reference/thresholding.html","id":null,"dir":"Reference","previous_headings":"","what":"Image thresholding — thresholding","title":"Image thresholding — thresholding","text":"Thresholding image can used simple straightforward image segmentation. function image_threshold() allows black white thresholding whereas image_lat() performs local adaptive thresholding.","code":""},{"path":"https://docs.ropensci.org/magick/reference/thresholding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image thresholding — thresholding","text":"","code":"image_threshold(   image,   type = c(\"black\", \"white\"),   threshold = \"50%\",   channel = NULL )  image_level(   image,   black_point = 0,   white_point = 100,   mid_point = 1,   channel = NULL )  image_lat(image, geometry = \"10x10+5%\")"},{"path":"https://docs.ropensci.org/magick/reference/thresholding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image thresholding — thresholding","text":"image magick image object returned image_read() image_graph() type type thresholding, either one lat, black white (see details ) threshold pixel intensity threshold percentage black white thresholding channel value channel_types() specifying channel(s) set black_point value 0 100, darkest color image white_point value 0 100, lightest color image mid_point value 0 10 used gamma correction geometry pixel window plus offset LAT algorithm","code":""},{"path":"https://docs.ropensci.org/magick/reference/thresholding.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image thresholding — thresholding","text":"image_threshold(type = \"black\"): Forces pixels threshold black leaving pixels threshold unchanged image_threshold(type = \"white\"): Forces pixels threshold white leaving pixels threshold unchanged image_lat(): Local Adaptive Thresholding. Looks box (width x height) around pixel neighborhood pixel value bigger average minus offset.","code":""},{"path":"https://docs.ropensci.org/magick/reference/thresholding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image thresholding — thresholding","text":"","code":"test <- image_convert(logo, colorspace = \"Gray\") image_threshold(test, type = \"black\", threshold = \"50%\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72   image_threshold(test, type = \"white\", threshold = \"50%\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72    # Turn image into BW test |>   image_threshold(type = \"white\", threshold = \"50%\") |>   image_threshold(type = \"black\", threshold = \"50%\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72    # adaptive thresholding image_lat(test, geometry = '10x10+5%') #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      640    480 Gray       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Image Transform — transform","title":"Image Transform — transform","text":"Basic transformations like rotate, resize, crop flip. geometry syntax used specify sizes areas.","code":""},{"path":"https://docs.ropensci.org/magick/reference/transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image Transform — transform","text":"","code":"image_trim(image, fuzz = 0)  image_chop(image, geometry)  image_rotate(image, degrees)  image_resize(image, geometry = NULL, filter = NULL)  image_scale(image, geometry = NULL)  image_sample(image, geometry = NULL)  image_crop(image, geometry = NULL, gravity = NULL, repage = TRUE)  image_extent(image, geometry, gravity = \"center\", color = \"none\")  image_flip(image)  image_flop(image)  image_deskew(image, threshold = 40)  image_deskew_angle(image, threshold = 40)  image_page(image, pagesize = NULL, density = NULL)  image_repage(image)  image_orient(image, orientation = NULL)  image_shear(image, geometry = \"10x10\", color = \"none\")  image_distort(image, distortion = \"perspective\", coordinates, bestfit = FALSE)"},{"path":"https://docs.ropensci.org/magick/reference/transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image Transform — transform","text":"image magick image object returned image_read() image_graph() fuzz relative color distance (value 0 100) considered similar filling algorithm geometry geometry string specifying area (cropping) size (resizing). degrees value 0 360 many degrees rotate filter string filter type : filter_types gravity string gravity value gravity_types. repage resize canvas cropped area color valid color string \"navyblue\" \"#000080\". Use \"none\" transparency. threshold straightens image. threshold 40 works images. pagesize geometry string preferred size location image canvas density geometry string vertical horizontal resolution pixels image. Specifies image density decoding Postscript PDF. orientation string set image orientation one orientation_types. NULL applies auto-orientation tries infer correct orientation Exif data. distortion string set image orientation one distort_types. coordinates numeric vector (typically length 12) distortion coordinates bestfit set TRUE size output image can different input","code":""},{"path":"https://docs.ropensci.org/magick/reference/transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image Transform — transform","text":"details see Magick++ STL documentation. Short descriptions: image_trim removes edges background color image. image_chop removes vertical horizontal subregion image. image_crop cuts subregion original image image_rotate rotates increases size canvas fit rotated image. image_deskew auto rotate correct skewed images image_resize resizes using custom filterType image_scale image_sample resize using simple ratio pixel sampling algorithm. image_flip image_flop invert image vertically horizontally powerful resize function image_resize allows setting custom resize filter. Output image_scale similar image_resize(img, filter = \"point\"). resize operations holds geometry specified, frames rescaled match top frame.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image Transform — transform","text":"","code":"logo <- image_read(\"logo:\") logo <- image_scale(logo, \"400\") image_trim(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      287    296 sRGB       FALSE        0 72x72   image_chop(logo, \"100x20\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      300    280 sRGB       FALSE        0 72x72   image_rotate(logo, 45) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      496    496 sRGB       FALSE        0 72x72   # Small image rose <- image_convert(image_read(\"rose:\"), \"png\")  # Resize to 400 width or height: image_resize(rose, \"400x\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      400    263 sRGB       FALSE        0 72x72   image_resize(rose, \"x400\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      609    400 sRGB       FALSE        0 72x72    # Resize keeping ratio image_resize(rose, \"400x400\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      400    263 sRGB       FALSE        0 72x72    # Resize, force size losing ratio image_resize(rose, \"400x400!\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      400    400 sRGB       FALSE        0 72x72    # Different filters image_resize(rose, \"400x\", filter = \"Triangle\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      400    263 sRGB       FALSE        0 72x72   image_resize(rose, \"400x\", filter = \"Point\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      400    263 sRGB       FALSE        0 72x72   # simple pixel resize image_scale(rose, \"400x\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      400    263 sRGB       FALSE        0 72x72   image_sample(rose, \"400x\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      400    263 sRGB       FALSE        0 72x72   image_crop(logo, \"400x400+200+200\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      200    100 sRGB       FALSE        0 72x72   image_extent(rose, '200x200', color = 'pink') #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 PNG      200    200 sRGB       FALSE        0 72x72   image_flip(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      400    300 sRGB       FALSE        0 72x72   image_flop(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      400    300 sRGB       FALSE        0 72x72   skewed <- image_rotate(logo, 5) deskewed <- image_deskew(skewed) attr(deskewed, 'angle') #> [1] -4.80068 if(magick_config()$version > \"6.8.6\")   image_orient(logo) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      400    300 sRGB       FALSE        0 72x72   image_shear(logo, \"10x10\") #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 GIF      453    361 sRGB       FALSE        0 72x72   building <- demo_image('building.jpg') image_distort(building, 'perspective', c(7,40,4,30,4,124,4,123,85,122,100,123,85,2,100,30)) #> # A tibble: 1 × 7 #>   format width height colorspace matte filesize density #>   <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>   #> 1 JPEG     146    150 sRGB       FALSE        0 72x72"},{"path":"https://docs.ropensci.org/magick/reference/video.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Video — video","title":"Write Video — video","text":"High quality video / gif exporter based external packages gifski av.","code":""},{"path":"https://docs.ropensci.org/magick/reference/video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Video — video","text":"","code":"image_write_video(image, path = NULL, framerate = 10, ...)  image_write_gif(image, path = NULL, delay = 1/10, ...)"},{"path":"https://docs.ropensci.org/magick/reference/video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Video — video","text":"image magick image object returned image_read() image_graph() path filename output gif video. also return value. framerate frames per second, passed av_encode_video ... additional parameters passed av_encode_video gifski. delay duration frame seconds (inverse framerate)","code":""},{"path":"https://docs.ropensci.org/magick/reference/video.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write Video — video","text":"requires image multiple frames. GIF exporter accomplishes thing image_animate much faster better quality.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/magick/reference/wizard.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Images — wizard","title":"Example Images — wizard","text":"Example images included ImageMagick:","code":""},{"path":"https://docs.ropensci.org/magick/reference/wizard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Images — wizard","text":"","code":"logo"},{"path":"https://docs.ropensci.org/magick/reference/wizard.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Images — wizard","text":"object class magick-image length 1.","code":""},{"path":"https://docs.ropensci.org/magick/reference/wizard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Images — wizard","text":"logo: ImageMagick Logo, 640x480 wizard: ImageMagick Wizard, 480x640 rose : Picture rose, 70x46 granite : Granite texture pattern, 128x128","code":""}]
